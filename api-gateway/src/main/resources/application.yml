spring:
  application:
    name: api-gateway

  profiles:
    active: dev

  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true

      routes:
        # ===== AUTH SERVICE =====
        - id: auth-service
          uri: lb://auth-service
          predicates:
            - Path=/api/auth/**
          filters:
            - name: RewritePath
              args:
                regexp: /api/auth/(?<segment>.*)
                replacement: /auth/${segment}
            - name: CircuitBreaker
              args:
                name: auth-service-cb
                fallbackUri: forward:/fallback/auth
            - name: RequestRateLimiter  # Rate limiting
              args:
                redis-rate-limiter.replenishRate: 10   # 10 requests por segundo
                redis-rate-limiter.burstCapacity: 20   # M치ximo 20 requests en burst
                key-resolver: "#{@ipKeyResolver}"      # Usar IP porque no hay JWT en auth

      # Configuraci칩n global de filtros
      default-filters:
        - name: AddResponseHeader
          args:
            name: X-API-Gateway
            value: Ticketing-System-Gateway
        - name: AddResponseHeader
          args:
            name: X-Response-Time
            value: "#{T(System).currentTimeMillis()}"


server:
  port: 8080
  error:
    include-message: always

# ===== EUREKA CLIENT =====
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.profiles.active}:${random.value}

spring.config.import: "optional:configserver:http://localhost:8888"

# ===== REDIS (Rate Limiting) =====
spring.redis:
  host: localhost
  port: 6379
  timeout: 2000ms

# ===== RESILIENCE4J (Circuit Breaker) =====
resilience4j:
  circuitbreaker:
    instances:
      auth-service-cb:
        registerHealthIndicator: true
        slidingWindowSize: 10          # Ventana de 10 requests
        failureRateThreshold: 50       # 50% de fallos para abrir circuito
        waitDurationInOpenState: 30s   # Esperar 30s antes de intentar de nuevo
        permittedNumberOfCallsInHalfOpenState: 3  # 3 llamadas en half-open

# ===== ACTUATOR (Health Checks) =====
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers,gateway  # Endpoints expuestos
  endpoint:
    health:
      show-details: always  # Mostrar detalles de health checks
  info:
    env:
      enabled: true

# ===== JWT CONFIGURATION =====
jwt:
  secret: QmFzZTY0RW5jb2RlZEtleVNlZ3VyYUV4YW1wbGVEYXRhIQ==  # Mismo secret que auth-service
  expiration: 86400000  # 24 horas en milliseconds (para producci칩n)

# ===== LOGGING =====
logging:
  level:
    com.ticketing.gateway: DEBUG              # Debug para nuestro c칩digo
    org.springframework.cloud.gateway: INFO   # Info para Gateway
    org.springframework.security: INFO        # Info para Security
    io.github.resilience4j: INFO             # Info para Circuit Breaker
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"